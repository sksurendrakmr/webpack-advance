Asset Modules
======
Asset modules is a new feature introduced in webpack 5.
It allow us to use asset files in our javascript application
without installing additional dependencies.

However, we still need to make changes to our webpack 
configuration in order to teach webpack how to import those
asset files. (images, plain text,fonts)


There are four types of asset modules we can use
===
1. asset/resource
    ======
    Emit files into the output directory and exports the URL to that file.
    
    This type of asset module can be used to import large images or large font files.

2. asset/inline
    ===
    Inline the file into the bundle as a data URI.
    
    It can be used when importing small asset files like SVG.
    
    Usually SVG are injected into the javascript bundle as the data URI.
    
    It doesn't generate a new file in the output folder.

3. asset 
    ===
    Serves as a combination of the previous two asset types.
    
    If we decide to use a general asset type, webpack will automatically
    choose between asset resource and asset inline.
    
    If the file size is less then 8KB, this file will be treated as inline asset module,
    else resource asset module.

    We can configure the size to anything we want.

4. asset/source
    ===
    Sometime, we need to import some plaintext data as a javascript string.
    E.g. a text file that has some data as plain text.

    Import the source code of the file as it is and injects it into
    the javascript bundle as a string of text.


asset/resource
======
we will import an image in js file.

webpack by default doesn't know how to import image in js file.
we need to teach webpack by configuring in webpack.config.js file i.e.
add special rule which will tell webpack how to import image files
inside the webpack configuration file.

asset module require the type property inside of use property inside rules array.

type property can take either one of these values:-
1. asset/source
2. asset/inline
3. asset/resource
4. asset




======
publicPath
======
public path tells webpack which URL to use in order to load all the 
generated files in the browser.

E.g. If we are using a static file like images in application, we 
can tell the browser where those static files should be taken from
using publicPath configuration options.

From v5, we don't much have to worry about this option in simple cases.

From v5, by default webpack set publicPath property to 'auto'
In previous version, the default was empty string.(Thus, in previous version, image was not loaded automatically)

By default, webpack uses the filename of the generated image without
the proper path of the image.

In order to fix that, we can change the public path to tell webpack
where it can take the image from.


There are some cases when publicPath should be specified explicitly.
What if we are serving static files from some kind of CDN.

What if we get the image as a special URL prefix from the server to serve static files.

in module federation feaure.


asset/inline module type
==========
asset/inline module doesn't generate a new file in the output directory.
Instead it will generate a base64 representation of file and bake it direclty
into the javascript bundle.

Asset/inline can be used when importing small asset files like SVG.

we can also use it for large file size but that will make javascript bundle more bigger.

since asset/resource will generate a sparate file for every image we are using.
This make browser to make a sepereate HTTP request for each image it needs to display.

if there are 20 images on a page, browser would need to make 20 additional HTTP requests
in order to display all those images.

and it will make sense if we have 20 very large images.

However if we have 20 small SVG then the cost of making 20 extra HTTP request is much higher than benefits. 
In this case we can use asset/inline type and webpack will inline into the main javascript bundle.


====
General asset type
====
-> Asset resource type generates a new file in the output directory
   for each of your assets and exports the URL to that file.

-> Asset inline module type generates a base64 representation of asset and injects 
   the base64 string directly into main javascript bundle.

-> We should use asset/resource when importing large files and the second 
   when importing small files.

-> General Asset type (Asset) -: Combination of asset/resource and asset/inline.
   If we are using general asset type, webpack will automatically choose between asset/resource 
   and asset/inline.
   
   Webpack will make this decision based on size of each file.

   If the file size if less than 8KB, the file will be treated as an inline asset,
   else resource asset.

   We have a way to change this number from 8KB to anything we want.


=========
asset/source module type
=========

-> Asset source reads the contents of the file into a 
   javascript string and injects that string directly
   bundle as is without any modifications.

-> Similary to asset/inline, this module doesn't generate 
   any file in the output directory.


====
Loaders
=====
Loaders allow us to import all other kind of files that we can't handle
using Asset modules.

**Webpack was designed to help us bundle all our dependencies into one or more files.

webpack processes loader from right to left.

npm i -D @babel/core babel-loader @babel/preset-env @babel/plugin-proposal-class-properties


====
Plugins
====
Plugins are additional javascript libraries that do everything that loaders cannot do.

Plugins can also modify how the bundles themeselves are created.
E.g. ugliyJsPlugin takes the bundle.js and minimizes the contents to decrease the bundle size.


===
Minification of the resulting webpack bundle
====
1. To load the web faster.
2. It will consume less Internet traffic.

To make webpack bundle size smaller, we will use a plugin called Terser plugin.
Terser plugin comes with webpack so we don't need to add additional npm package.



